import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "../components/ui/card"
import { Badge } from "../components/ui/badge"
import { Button } from "../components/ui/button"
import { AlertTriangle, XCircle, AlertCircle, Info, ExternalLink, Code } from "lucide-react"

const vulnerabilities = [
  {
    id: 1,
    severity: "high",
    title: "Reentrancy Vulnerability",
    description: "Function 'withdraw' allows reentrancy attacks through external calls",
    line: 67,
    category: "Access Control",
    impact: "Funds can be drained from the contract",
    recommendation: "Implement reentrancy guard or checks-effects-interactions pattern",
    codeSnippet: `function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount);
    msg.sender.call{value: amount}(""); // Vulnerable line
    balances[msg.sender] -= amount;
}`,
  },
  {
    id: 2,
    severity: "high",
    title: "Integer Overflow",
    description: "Arithmetic operations without overflow protection",
    line: 34,
    category: "Arithmetic",
    impact: "Unexpected behavior and potential fund loss",
    recommendation: "Use SafeMath library or Solidity 0.8+ built-in overflow checks",
    codeSnippet: `function mint(address to, uint256 amount) public {
    totalSupply += amount; // Potential overflow
    balances[to] += amount;
}`,
  },
  {
    id: 3,
    severity: "high",
    title: "Unchecked External Call",
    description: "External call return value not checked",
    line: 89,
    category: "External Calls",
    impact: "Silent failures may lead to inconsistent state",
    recommendation: "Always check return values of external calls",
    codeSnippet: `function transfer(address token, uint256 amount) public {
    IERC20(token).transfer(msg.sender, amount); // Return value ignored
}`,
  },
  {
    id: 4,
    severity: "medium",
    title: "Centralization Risk",
    description: "Owner has excessive privileges without timelock",
    line: 23,
    category: "Access Control",
    impact: "Single point of failure and trust issues",
    recommendation: "Implement multi-signature wallet or timelock mechanism",
    codeSnippet: `modifier onlyOwner() {
    require(msg.sender == owner, "Not owner");
    _;
}`,
  },
  {
    id: 5,
    severity: "medium",
    title: "Gas Limit DoS",
    description: "Unbounded loop may cause out-of-gas errors",
    line: 156,
    category: "Gas Optimization",
    impact: "Function may become unusable with large arrays",
    recommendation: "Implement pagination or limit array size",
    codeSnippet: `function processAll() public {
    for (uint i = 0; i < users.length; i++) { // Unbounded loop
        processUser(users[i]);
    }
}`,
  },
]

const getSeverityIcon = (severity: string) => {
  switch (severity) {
    case "high":
      return <XCircle className="w-5 h-5 text-destructive" />
    case "medium":
      return <AlertTriangle className="w-5 h-5 text-yellow-500" />
    case "low":
      return <AlertCircle className="w-5 h-5 text-blue-500" />
    default:
      return <Info className="w-5 h-5 text-muted-foreground" />
  }
}

const getSeverityBadge = (severity: string) => {
  switch (severity) {
    case "high":
      return <Badge variant="destructive">High Risk</Badge>
    case "medium":
      return (
        <Badge variant="secondary" className="bg-yellow-500/10 text-yellow-700">
          Medium Risk
        </Badge>
      )
    case "low":
      return (
        <Badge variant="secondary" className="bg-blue-500/10 text-blue-700">
          Low Risk
        </Badge>
      )
    default:
      return <Badge variant="secondary">Info</Badge>
  }
}

export function VulnerabilityScanner() {
  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <AlertTriangle className="w-5 h-5" />
            Security Vulnerabilities
          </CardTitle>
          <CardDescription>AI-detected security issues with severity levels and fix recommendations</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <div className="text-center p-4 bg-destructive/5 border border-destructive/20 rounded-lg">
              <div className="text-2xl font-bold text-destructive mb-1">3</div>
              <div className="text-sm text-muted-foreground">High Risk Issues</div>
            </div>
            <div className="text-center p-4 bg-yellow-500/5 border border-yellow-500/20 rounded-lg">
              <div className="text-2xl font-bold text-yellow-600 mb-1">2</div>
              <div className="text-sm text-muted-foreground">Medium Risk Issues</div>
            </div>
            <div className="text-center p-4 bg-blue-500/5 border border-blue-500/20 rounded-lg">
              <div className="text-2xl font-bold text-blue-600 mb-1">0</div>
              <div className="text-sm text-muted-foreground">Low Risk Issues</div>
            </div>
          </div>
        </CardContent>
      </Card>

      <div className="space-y-4">
        {vulnerabilities.map((vuln) => (
          <Card key={vuln.id} className="border-l-4 border-l-destructive">
            <CardHeader>
              <div className="flex items-start justify-between">
                <div className="flex items-center gap-3">
                  {getSeverityIcon(vuln.severity)}
                  <div>
                    <CardTitle className="text-lg">{vuln.title}</CardTitle>
                    <div className="flex items-center gap-2 mt-1">
                      <Badge variant="outline" className="text-xs">
                        Line {vuln.line}
                      </Badge>
                      <Badge variant="outline" className="text-xs">
                        {vuln.category}
                      </Badge>
                    </div>
                  </div>
                </div>
                {getSeverityBadge(vuln.severity)}
              </div>
              <CardDescription className="text-base">{vuln.description}</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <h4 className="font-medium text-sm mb-2">Impact</h4>
                  <p className="text-sm text-muted-foreground">{vuln.impact}</p>
                </div>
                <div>
                  <h4 className="font-medium text-sm mb-2">Recommendation</h4>
                  <p className="text-sm text-muted-foreground">{vuln.recommendation}</p>
                </div>
              </div>

              <div>
                <h4 className="font-medium text-sm mb-2 flex items-center gap-2">
                  <Code className="w-4 h-4" />
                  Vulnerable Code
                </h4>
                <div className="bg-muted p-3 rounded-lg font-mono text-sm overflow-x-auto">
                  <pre className="whitespace-pre-wrap">{vuln.codeSnippet}</pre>
                </div>
              </div>

              <div className="flex gap-2">
                <Button size="sm" variant="outline">
                  <ExternalLink className="w-4 h-4 mr-2" />
                  Learn More
                </Button>
                <Button size="sm">View Fix Suggestion</Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}
